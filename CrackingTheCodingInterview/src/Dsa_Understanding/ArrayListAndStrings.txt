ArrayList and Strings:

The array or list will grow as you append items.
When you need an array-like data structure that offers dynamic resizing, you would usually use an Arraylist.

1 Arraylist<String> merge(String[] words, String[] more) {
2 Arraylist<String> sentence= new Arraylist<String>();
3 for (String w: words) sentence.add(w);
4 for (String w: more) sentence.add(w);
5 return sentence;
6 }

StringBuilder:

1 String joinWords(String[] words) {
2 String sentence = "";
3 for (String w: words) {
4 sentence = sentence + w;
5 }
6 return sentence;
7 }

On each concatenation, a new copy of the string is created, and the two strings are copied over, character
by character. The first iteration requires us to copy x characters. The second iteration requires copying 2x
characters. The third iteration requires 3x, and so on. The total time therefore is O( x + 2x + . . . + nx).
This reduces to O(xn^2). 

Why is itO(xn2)?Because1 + 2 + ... + n equals n(n+1)/2,orO(n^2)

StringBuilder can help you avoid.this problem. StringBuilder simply creates a resizable array of all
the strings, copying them back to a string only when necessary.

1 String joinWords(String[] words) {
2 StringBuilder sentence new StringBuilder();
3 for (String w: words) {
4 sentence.append(w);
5 }
6 return sentence.toString();
7 } 


